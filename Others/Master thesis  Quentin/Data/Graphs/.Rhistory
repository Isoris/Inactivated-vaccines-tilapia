surv.median.line = "hv", # Specify median survival
ggtheme = theme_qwen(), # Change ggplot2 theme
)
ggsci
install.packages("ggsci")
library(ggsci)
ggsurvplot(fitchal1,
pval = TRUE, conf.int = TRUE,
risk.table = TRUE, # Add risk table
risk.table.col = "strata", # Change risk table color by groups
linetype = "strata", # Change line type by groups
surv.median.line = "hv", # Specify median survival
ggtheme = theme_qwen(),
palette = "NPG" # Change ggplot2 theme
)
ggsurvplot(fitchal1,
pval = TRUE, conf.int = TRUE,
risk.table = TRUE, # Add risk table
risk.table.col = "strata", # Change risk table color by groups
linetype = "strata", # Change line type by groups
surv.median.line = "hv", # Specify median survival
ggtheme = theme_qwen(),
palette = NPG # Change ggplot2 theme
)
library(ggsci)
npg
pal_npg()
pal_npg(4)
pal <- pal_npg(4)
ggsurvplot(fitchal1,
pval = TRUE, conf.int = TRUE,
risk.table = TRUE, # Add risk table
risk.table.col = "strata", # Change risk table color by groups
linetype = "strata", # Change line type by groups
surv.median.line = "hv", # Specify median survival
ggtheme = theme_qwen(),
scale_color_npg()# Change ggplot2 theme
)
pal <- pal_npg(4)
ggsurvplot(fitchal1,
pval = TRUE, conf.int = TRUE,
risk.table = TRUE, # Add risk table
risk.table.col = "strata", # Change risk table color by groups
linetype = "strata", # Change line type by groups
surv.median.line = "hv", # Specify median survival
ggtheme = theme_qwen(),
scale_color_npg()# Change ggplot2 theme
)
mypal = pal_npg("nrc", alpha = 0.7)(9)
mypal
mypal = pal_npg("nrc", alpha = 0.7)(10)
mypal
ggsurvplot(fitchal1,
pval = TRUE, conf.int = TRUE,
risk.table = TRUE, # Add risk table
risk.table.col = "strata", # Change risk table color by groups
linetype = "strata", # Change line type by groups
surv.median.line = "hv", # Specify median survival
ggtheme = theme_qwen(),
palette = mypal# Change ggplot2 theme
)
mypal = pal_npg("nrc", alpha = 1)(10)
mypal
mypal = pal_npg("nrc")(10)
mypal
ggsurvplot(fitchal1,
pval = TRUE, conf.int = TRUE,
risk.table = TRUE, # Add risk table
risk.table.col = "strata", # Change risk table color by groups
linetype = "strata", # Change line type by groups
surv.median.line = "hv", # Specify median survival
ggtheme = theme_qwen(),
palette = mypal# Change ggplot2 theme
)
ggsurvplot(fitchal1,
pval = TRUE, conf.int = TRUE,
risk.table = TRUE, # Add risk table
risk.table.col = "strata", # Change risk table color by groups
linetype = "strata", # Change line type by groups
surv.median.line = "hv", # Specify median survival
ggtheme = theme_qwen(legend.position = "bottom"),
palette = mypal # Change ggplot2 theme
)
ggsurvplot(fitchal1,
pval = TRUE, conf.int = TRUE,
risk.table = TRUE, # Add risk table
risk.table.col = "strata", # Change risk table color by groups
linetype = "strata", # Change line type by groups
surv.median.line = "hv", # Specify median survival
ggtheme = theme_qwen()+theme(legend.position = "bottom"),
palette = mypal # Change ggplot2 theme
)
ggsurvplot(fitchal1,
pval = TRUE, conf.int = TRUE,
risk.table = TRUE, # Add risk table
risk.table.col = "strata", # Change risk table color by groups
linetype = "strata", # Change line type by groups
surv.median.line = "hv", # Specify median survival
ggtheme = theme_qwen()+theme(legend.position = "bottom"),
palette = mypal # Change ggplot2 theme
)
ggsurvplot(fitchal1,
pval = TRUE, conf.int = TRUE,
risk.table = TRUE, # Add risk table
risk.table.col = "strata", # Change risk table color by groups
linetype = "strata", # Change line type by groups
surv.median.line = "hv", # Specify median survival
ggtheme = theme(legend.position = "bottom"),
palette = mypal # Change ggplot2 theme
)
ggsurvplot(fitchal1,
pval = TRUE, conf.int = TRUE,
risk.table = TRUE, # Add risk table
risk.table.col = "strata", # Change risk table color by groups
linetype = "strata", # Change line type by groups
surv.median.line = "hv", # Specify median survival
ggtheme = legend.position = "bottom",
palette = mypal # Change ggplot2 theme
)
theme_qwen_small<- function() {
font <- "serif"
ggplot2::theme(
#Text format:
#This sets the font, size, type and colour of text for the chart's title
plot.title = ggplot2::element_text(family=font,
size=26,
face="bold",
color="#2C6975"),
#This sets the font, size, type and colour of text for the chart's subtitle, as well as setting a margin between the title and the subtitle
plot.subtitle = ggplot2::element_text(family=font,
size=23,
color = "#0a3c62",
margin=ggplot2::margin(7,0,7,0)),
plot.caption = ggplot2::element_blank(),
# plot.caption = ggplot2::element_text(family=font,
#                                      size=16,
#                                      face = "bold",
#                                      color = "#063051",
#                                      margin=ggplot2::margin(7,50,7,15)),
#This leaves the caption text element empty, because it is set elsewhere in the finalise plot function
#Legend format
#This sets the position and alignment of the legend, removes a title and backround for it and sets the requirements for any text within the legend. The legend may often need some more manual tweaking when it comes to its exact position based on the plot coordinates.
legend.position = "top",
legend.text.align = 0,
legend.background = ggplot2::element_blank(),
legend.title = ggplot2::element_blank(),
legend.key = ggplot2::element_blank(),
legend.text = ggplot2::element_text(family=font,
size=9,
face = "bold",
color="#2C6975"),
#Axis format
#This sets the text font, size and colour for the axis test, as well as setting the margins and removes lines and ticks.
#In some cases, axis lines and axis ticks are things we would want to have in the chart - the cookbook shows examples of how to do so.
axis.title = element_text(family=font, size = 18, face = "bold", color="#2C6975"),
axis.text = element_text(family=font, size = 16, face = "bold", color="#2C6975"),
axis.text.x = ggplot2::element_text(margin=ggplot2::margin(5, b = 10), family=font, color="#2C6975"),
axis.ticks = ggplot2::element_blank(),
axis.line = element_line(color = "#E9765B", arrow = arrow(length = unit(0.6, "lines"), type = "closed")),
#Grid lines
#This removes all minor gridlines and adds major y gridlines. In many cases you will want to change this to remove y gridlines and add x gridlines. The cookbook shows you examples for doing so
panel.grid.minor = ggplot2::element_blank(),
panel.grid.major.y = ggplot2::element_line(color="#a9b7be"),
panel.grid.major.x = ggplot2::element_line(color="#a9b7be"),
panel.border = element_blank(),
#Blank background
panel.background = element_rect(fill = "#F5F5F0",
size = 2),
#This sets the panel background as blank, removing the standard grey ggplot background colour from the plot
#Strip background (#This sets the panel background for facet-wrapped plots to white, removing the standard grey ggplot background colour and sets the title size of the facet-wrap title to font size 22)
strip.background = element_rect(fill = "#2C6975", color = "#2C6975"),
strip.text = element_text(size = rel(1), face = "bold", color = "white")
)
}
ggsurvplot(fitchal1,
pval = TRUE, conf.int = TRUE,
risk.table = TRUE, # Add risk table
risk.table.col = "strata", # Change risk table color by groups
linetype = "strata", # Change line type by groups
surv.median.line = "hv", # Specify median survival
ggtheme = theme_qwen_small(),
palette = mypal # Change ggplot2 theme
)
theme_qwen_small<- function() {
font <- "serif"
ggplot2::theme(
#Text format:
#This sets the font, size, type and colour of text for the chart's title
plot.title = ggplot2::element_text(family=font,
size=26,
face="bold",
color="#2C6975"),
#This sets the font, size, type and colour of text for the chart's subtitle, as well as setting a margin between the title and the subtitle
plot.subtitle = ggplot2::element_text(family=font,
size=23,
color = "#0a3c62",
margin=ggplot2::margin(7,0,7,0)),
plot.caption = ggplot2::element_blank(),
# plot.caption = ggplot2::element_text(family=font,
#                                      size=16,
#                                      face = "bold",
#                                      color = "#063051",
#                                      margin=ggplot2::margin(7,50,7,15)),
#This leaves the caption text element empty, because it is set elsewhere in the finalise plot function
#Legend format
#This sets the position and alignment of the legend, removes a title and backround for it and sets the requirements for any text within the legend. The legend may often need some more manual tweaking when it comes to its exact position based on the plot coordinates.
legend.position = "top",
legend.text.align = 0,
legend.background = ggplot2::element_blank(),
legend.title = ggplot2::element_blank(),
legend.key = ggplot2::element_blank(),
legend.text = ggplot2::element_text(family=font,
size=12,
face = "bold",
color="#2C6975"),
#Axis format
#This sets the text font, size and colour for the axis test, as well as setting the margins and removes lines and ticks.
#In some cases, axis lines and axis ticks are things we would want to have in the chart - the cookbook shows examples of how to do so.
axis.title = element_text(family=font, size = 18, face = "bold", color="#2C6975"),
axis.text = element_text(family=font, size = 12, face = "bold", color="#2C6975"),
axis.text.x = ggplot2::element_text(margin=ggplot2::margin(5, b = 10), family=font, color="#2C6975"),
axis.ticks = ggplot2::element_blank(),
axis.line = element_line(color = "#E9765B", arrow = arrow(length = unit(0.6, "lines"), type = "closed")),
#Grid lines
#This removes all minor gridlines and adds major y gridlines. In many cases you will want to change this to remove y gridlines and add x gridlines. The cookbook shows you examples for doing so
panel.grid.minor = ggplot2::element_blank(),
panel.grid.major.y = ggplot2::element_line(color="#a9b7be"),
panel.grid.major.x = ggplot2::element_line(color="#a9b7be"),
panel.border = element_blank(),
#Blank background
panel.background = element_rect(fill = "#F5F5F0",
size = 2),
#This sets the panel background as blank, removing the standard grey ggplot background colour from the plot
#Strip background (#This sets the panel background for facet-wrapped plots to white, removing the standard grey ggplot background colour and sets the title size of the facet-wrap title to font size 22)
strip.background = element_rect(fill = "#2C6975", color = "#2C6975"),
strip.text = element_text(size = rel(1), face = "bold", color = "white")
)
}
ggsurvplot(fitchal1,
pval = TRUE, conf.int = TRUE,
risk.table = TRUE, # Add risk table
risk.table.col = "strata", # Change risk table color by groups
linetype = "strata", # Change line type by groups
surv.median.line = "hv", # Specify median survival
ggtheme = theme_qwen_small(),
palette = mypal # Change ggplot2 theme
)
theme_qwen_small<- function() {
font <- "serif"
ggplot2::theme(
#Text format:
#This sets the font, size, type and colour of text for the chart's title
plot.title = ggplot2::element_text(family=font,
size=26,
face="bold",
color="#2C6975"),
#This sets the font, size, type and colour of text for the chart's subtitle, as well as setting a margin between the title and the subtitle
plot.subtitle = ggplot2::element_text(family=font,
size=16,
color = "#0a3c62",
margin=ggplot2::margin(7,0,7,0)),
plot.caption = ggplot2::element_blank(),
# plot.caption = ggplot2::element_text(family=font,
#                                      size=16,
#                                      face = "bold",
#                                      color = "#063051",
#                                      margin=ggplot2::margin(7,50,7,15)),
#This leaves the caption text element empty, because it is set elsewhere in the finalise plot function
#Legend format
#This sets the position and alignment of the legend, removes a title and backround for it and sets the requirements for any text within the legend. The legend may often need some more manual tweaking when it comes to its exact position based on the plot coordinates.
legend.position = "top",
legend.text.align = 0,
legend.background = ggplot2::element_blank(),
legend.title = ggplot2::element_blank(),
legend.key = ggplot2::element_blank(),
legend.text = ggplot2::element_text(family=font,
size=10,
face = "bold",
color="#2C6975"),
#Axis format
#This sets the text font, size and colour for the axis test, as well as setting the margins and removes lines and ticks.
#In some cases, axis lines and axis ticks are things we would want to have in the chart - the cookbook shows examples of how to do so.
axis.title = element_text(family=font, size = 18, face = "bold", color="#2C6975"),
axis.text = element_text(family=font, size = 10, face = "bold", color="#2C6975"),
axis.text.x = ggplot2::element_text(margin=ggplot2::margin(5, b = 10), family=font, color="#2C6975"),
axis.ticks = ggplot2::element_blank(),
axis.line = element_line(color = "#E9765B", arrow = arrow(length = unit(0.6, "lines"), type = "closed")),
#Grid lines
#This removes all minor gridlines and adds major y gridlines. In many cases you will want to change this to remove y gridlines and add x gridlines. The cookbook shows you examples for doing so
panel.grid.minor = ggplot2::element_blank(),
panel.grid.major.y = ggplot2::element_line(color="#a9b7be"),
panel.grid.major.x = ggplot2::element_line(color="#a9b7be"),
panel.border = element_blank(),
#Blank background
panel.background = element_rect(fill = "#F5F5F0",
size = 2),
#This sets the panel background as blank, removing the standard grey ggplot background colour from the plot
#Strip background (#This sets the panel background for facet-wrapped plots to white, removing the standard grey ggplot background colour and sets the title size of the facet-wrap title to font size 22)
strip.background = element_rect(fill = "#2C6975", color = "#2C6975"),
strip.text = element_text(size = rel(1), face = "bold", color = "white")
)
}
ggsurvplot(fitchal1,
pval = TRUE, conf.int = TRUE,
risk.table = TRUE, # Add risk table
risk.table.col = "strata", # Change risk table color by groups
linetype = "strata", # Change line type by groups
surv.median.line = "hv", # Specify median survival
ggtheme = theme_qwen_small(),
palette = mypal # Change ggplot2 theme
)
theme_qwen_small<- function() {
font <- "serif"
ggplot2::theme(
#Text format:
#This sets the font, size, type and colour of text for the chart's title
plot.title = ggplot2::element_text(family=font,
size=16,
face="bold",
color="#2C6975"),
#This sets the font, size, type and colour of text for the chart's subtitle, as well as setting a margin between the title and the subtitle
plot.subtitle = ggplot2::element_text(family=font,
size=14,
color = "#0a3c62",
margin=ggplot2::margin(7,0,7,0)),
plot.caption = ggplot2::element_blank(),
# plot.caption = ggplot2::element_text(family=font,
#                                      size=16,
#                                      face = "bold",
#                                      color = "#063051",
#                                      margin=ggplot2::margin(7,50,7,15)),
#This leaves the caption text element empty, because it is set elsewhere in the finalise plot function
#Legend format
#This sets the position and alignment of the legend, removes a title and backround for it and sets the requirements for any text within the legend. The legend may often need some more manual tweaking when it comes to its exact position based on the plot coordinates.
legend.position = "top",
legend.text.align = 0,
legend.background = ggplot2::element_blank(),
legend.title = ggplot2::element_blank(),
legend.key = ggplot2::element_blank(),
legend.text = ggplot2::element_text(family=font,
size=10,
face = "bold",
color="#2C6975"),
#Axis format
#This sets the text font, size and colour for the axis test, as well as setting the margins and removes lines and ticks.
#In some cases, axis lines and axis ticks are things we would want to have in the chart - the cookbook shows examples of how to do so.
axis.title = element_text(family=font, size = 18, face = "bold", color="#2C6975"),
axis.text = element_text(family=font, size = 9, face = "bold", color="#2C6975"),
axis.text.x = ggplot2::element_text(margin=ggplot2::margin(5, b = 10), family=font, color="#2C6975"),
axis.ticks = ggplot2::element_blank(),
axis.line = element_line(color = "#E9765B", arrow = arrow(length = unit(0.6, "lines"), type = "closed")),
#Grid lines
#This removes all minor gridlines and adds major y gridlines. In many cases you will want to change this to remove y gridlines and add x gridlines. The cookbook shows you examples for doing so
panel.grid.minor = ggplot2::element_blank(),
panel.grid.major.y = ggplot2::element_line(color="#a9b7be"),
panel.grid.major.x = ggplot2::element_line(color="#a9b7be"),
panel.border = element_blank(),
#Blank background
panel.background = element_rect(fill = "#F5F5F0",
size = 2),
#This sets the panel background as blank, removing the standard grey ggplot background colour from the plot
#Strip background (#This sets the panel background for facet-wrapped plots to white, removing the standard grey ggplot background colour and sets the title size of the facet-wrap title to font size 22)
strip.background = element_rect(fill = "#2C6975", color = "#2C6975"),
strip.text = element_text(size = rel(1), face = "bold", color = "white")
)
}
ggsurvplot(fitchal1,
pval = TRUE, conf.int = TRUE,
risk.table = TRUE, # Add risk table
risk.table.col = "strata", # Change risk table color by groups
linetype = "strata", # Change line type by groups
surv.median.line = "hv", # Specify median survival
ggtheme = theme_qwen_small(),
palette = mypal # Change ggplot2 theme
)
theme_qwen_small<- function() {
font <- "serif"
ggplot2::theme(
#Text format:
#This sets the font, size, type and colour of text for the chart's title
plot.title = ggplot2::element_text(family=font,
size=20,
face="bold",
color="#2C6975"),
#This sets the font, size, type and colour of text for the chart's subtitle, as well as setting a margin between the title and the subtitle
plot.subtitle = ggplot2::element_text(family=font,
size=14,
color = "#0a3c62",
margin=ggplot2::margin(7,0,7,0)),
plot.caption = ggplot2::element_blank(),
# plot.caption = ggplot2::element_text(family=font,
#                                      size=16,
#                                      face = "bold",
#                                      color = "#063051",
#                                      margin=ggplot2::margin(7,50,7,15)),
#This leaves the caption text element empty, because it is set elsewhere in the finalise plot function
#Legend format
#This sets the position and alignment of the legend, removes a title and backround for it and sets the requirements for any text within the legend. The legend may often need some more manual tweaking when it comes to its exact position based on the plot coordinates.
legend.position = "top",
legend.text.align = 0,
legend.background = ggplot2::element_blank(),
legend.title = ggplot2::element_blank(),
legend.key = ggplot2::element_blank(),
legend.text = ggplot2::element_text(family=font,
size=10,
face = "bold",
color="#2C6975"),
#Axis format
#This sets the text font, size and colour for the axis test, as well as setting the margins and removes lines and ticks.
#In some cases, axis lines and axis ticks are things we would want to have in the chart - the cookbook shows examples of how to do so.
axis.title = element_text(family=font, size = 18, face = "bold", color="#2C6975"),
axis.text = element_text(family=font, size = 9, face = "bold", color="#2C6975"),
axis.text.x = ggplot2::element_text(margin=ggplot2::margin(5, b = 10), family=font, color="#2C6975"),
axis.ticks = ggplot2::element_blank(),
axis.line = element_line(color = "#E9765B", arrow = arrow(length = unit(0.6, "lines"), type = "closed")),
#Grid lines
#This removes all minor gridlines and adds major y gridlines. In many cases you will want to change this to remove y gridlines and add x gridlines. The cookbook shows you examples for doing so
panel.grid.minor = ggplot2::element_blank(),
panel.grid.major.y = ggplot2::element_line(color="#a9b7be"),
panel.grid.major.x = ggplot2::element_line(color="#a9b7be"),
panel.border = element_blank(),
#Blank background
panel.background = element_rect(fill = "#F5F5F0",
size = 2),
#This sets the panel background as blank, removing the standard grey ggplot background colour from the plot
#Strip background (#This sets the panel background for facet-wrapped plots to white, removing the standard grey ggplot background colour and sets the title size of the facet-wrap title to font size 22)
strip.background = element_rect(fill = "#2C6975", color = "#2C6975"),
strip.text = element_text(size = rel(1), face = "bold", color = "white")
)
}
ggsurv1$plot +theme_qwen() +
theme (legend.position = "right")+
facet_grid(treatment ~ type)+theme(strip.text.y = element_text(margin = margin(0.5,0,0.5,0, "cm")))+
xlab("Hours post-infection")
ggsurv1 <- ggsurvplot(fitchallenge1, fun = "event", conf.int = TRUE,
ggtheme = theme_qwen(), palette = mypal)
ggsurv1$plot +theme_qwen() +
theme (legend.position = "right")+
facet_grid(treatment ~ type)+theme(strip.text.y = element_text(margin = margin(0.5,0,0.5,0, "cm")))+
xlab("Hours post-infection")
ggsurv1 <- ggsurvplot(fitchallenge1, fun = "event", conf.int = TRUE,
ggtheme = theme_qwen(), palette = mypal)
ggsurv1$plot +theme_qwen() +
theme (legend.position = "right")+
facet_grid(treatment ~ type)+theme(strip.text.y = element_text(margin = margin(0.5,0,0.5,0, "cm")))+
xlab("Hours post-infection")
mypal2 = pal_npg("nrc")(13)
mypal2
mypal2 = pal_npg("nrc")(13)
mypal2
mypal
ggsurv1 <- ggsurvplot(fitchallenge1, fun = "event", conf.int = TRUE,
ggtheme = theme_qwen(), palette = viridis)
ggsurv1$plot +theme_qwen() +
theme (legend.position = "right")+
facet_grid(treatment ~ type)+theme(strip.text.y = element_text(margin = margin(0.5,0,0.5,0, "cm")))+
xlab("Hours post-infection")
ggsurv1 <- ggsurvplot(fitchallenge1, fun = "event", conf.int = TRUE,
ggtheme = theme_qwen(), palette = "viridis")
ggsurv1$plot +theme_qwen() +
theme (legend.position = "right")+
facet_grid(treatment ~ type)+theme(strip.text.y = element_text(margin = margin(0.5,0,0.5,0, "cm")))+
xlab("Hours post-infection")
viridis::viridis_pal(option = "D")
viridis::viridis_pal(option = "D", 13)
viridispal <- viridis::viridis_pal(option = "D", 13)
View(viridispal)
viridispal <- viridis::viridis_pal(13, option = "D")
viridispal <- viridis::viridis_pal(13, option = "D")
viridispal <- viridis::viridis_pal(13, option = D)
viridispal <- viridis::viridis_pal(13, option = D)
viridispal <- viridis_pal(13, option = D)
viridis_pal(13, option = D)
library(viridis)
library(viridisLite)
library(viridis)
viridis_pal(13, option = D)
?viridis_pal
show_col(viridis_pal(option = "D")(13))
library(scales)
show_col(viridis_pal(option = "D")(13))
viridiscol <- show_col(viridis_pal(option = "D")(13))
viridis_pal(alpha = 1, begin = 0, end = 1, direction = 1)
viridis(alpha = 1, begin = 0, end = 1, direction = 1)
viridis(13, alpha = 1, begin = 0, end = 1, direction = 1)
viridis(13, alpha = 1, begin = 0, end = 1, direction = 1, option = "viridis")
viridiscol <- viridis(13, alpha = 1, begin = 0, end = 1, direction = 1, option = "viridis")
ggsurv1 <- ggsurvplot(fitchallenge1, fun = "event", conf.int = TRUE,
ggtheme = theme_qwen(), palette = viridiscol)
ggsurv1$plot +theme_qwen() +
theme (legend.position = "right")+
facet_grid(treatment ~ type)+theme(strip.text.y = element_text(margin = margin(0.5,0,0.5,0, "cm")))+
xlab("Hours post-infection")
col_vector<-c('#e6194b', '#3cb44b', '#ffe119', '#4363d8', '#f58231', '#911eb4', '#46f0f0', '#f032e6', '#bcf60c', '#fabebe', '#008080', '#e6beff', '#9a6324', '#fffac8', '#800000', '#aaffc3', '#808000', '#ffd8b1', '#000075', '#808080', '#ffffff', '#000000')
col_vector<-c('#e6194b', '#3cb44b', '#ffe119', '#4363d8', '#f58231', '#911eb4', '#46f0f0', '#f032e6',
'#bcf60c', '#fabebe', '#008080', '#e6beff', '#9a6324', '#fffac8', '#800000', '#aaffc3',
'#808000', '#ffd8b1', '#000075', '#808080', '#ffffff', '#000000')
ggsurv1 <- ggsurvplot(fitchallenge1, fun = "event", conf.int = TRUE,
ggtheme = theme_qwen(), palette = col_vector)
ggsurv1$plot +theme_qwen() +
theme (legend.position = "right")+
facet_grid(treatment ~ type)+theme(strip.text.y = element_text(margin = margin(0.5,0,0.5,0, "cm")))+
xlab("Hours post-infection")
ggsurvplot(fitchal1,
pval = TRUE, conf.int = TRUE,
risk.table = TRUE, # Add risk table
risk.table.col = "strata", # Change risk table color by groups
linetype = "strata", # Change line type by groups
surv.median.line = "hv", # Specify median survival
ggtheme = theme_qwen_small(),
palette = mypal # Change ggplot2 theme
)
